% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/coffee_forecast.R
\name{coffee_forecast}
\alias{coffee_forecast}
\title{Future Forecast using the COFFEE method}
\usage{
coffee_forecast(
  TS_data,
  emp_grow_model,
  population,
  total_cases,
  random_vectors,
  pred_time_data,
  pred_by_factor = NULL,
  attack_rate_bounds = c(0.4, 7),
  return_plot = FALSE
)
}
\arguments{
\item{TS_data}{Time Series data from empirical_growth_rates function}

\item{emp_grow_model}{Empirical growth model from empirical_growth_rates function}

\item{population}{Total population (constant)}

\item{total_cases}{Total number of cases currently observed in the population (constant)}

\item{random_vectors}{random samples of (eta, omega, phi) from inverse distance function. See sample_inv_dist.}

\item{pred_time_data}{time data for future forecast values}

\item{pred_by_factor}{(Optional) by_factor data for future forecast values}

\item{attack_rate_bounds}{(Optional) Lower and Upper bounds to uniformly sample attack rate}

\item{return_plot}{(Optional) Return ggplot visualization of forecast values}
}
\value{
A list containing
\item{full_forecast_data}{For each random vector, a time series of future forecast values is calculated. These are
saved row-wise in this matrix, along with the pred_time_data}
\item{simplified_data}{A dataframe of length(pred_time_data) containing pred_time_data,
median of forecast count data, and 10/25/75/90 quantiles of forecast count data}
\item{plot}{(Optional) A ggplot2 object visualizing forecast data}
}
\description{
Future Forecast using the COFFEE method
}
\examples{
# Example dataset
data("jh_data_daily_confirm")
data("state_population")

# Specify the count data to be days 1-550 of Pennsylvania's daily Covid-19 cases
count_data = jh_data_daily_confirm$Pennsylvania[1:550]

# Specify the time data to be days 1-550
time_data = jh_data_daily_confirm$date[1:550]

# Add a "day of week" effect to the model
by_factor = jh_data_daily_confirm$day_of_week[1:550]

num_train = 28
num_test = 14
num_forecast = 7

# Get Florida Population and use .55 as susceptible population proportion
population = state_population$Pennsylvania[1]
susc_perc = .55
total_cases = sum(jh_data_daily_confirm$Pennsylvania[1:550])

# Empirical Growth Rate (EGR) and EGR Model is needed to calculate
# random vectors sampled from the empirical growth rate model
Penn_emp_grow_rate = empirical_growth_rates(count_data = count_data,
                                            time_data = time_data,
                                            num_train = num_train,
                                            num_test = num_test,
                                            population = population,
                                            susc_perc = susc_perc,
                                            by_factor = by_factor)

TS_train_data = Penn_emp_grow_rate$data[1:num_train, ]
TS_test_data = Penn_emp_grow_rate$data[-(1:num_train), ]

eta_bounds = c(0,1)
omega_bounds = c(1, 10)
phi_bounds = c(.5,1.5)

# Get random vector data
data("pennsylvania_random_vectors_example")
random_vectors = pennsylvania_random_vectors_example

# Empirical Growth Rate (EGR) and EGR Model is needed to recalculated
# with 0 testing days in order to retrieve the model used for future forecast
Penn_emp_grow_rate = empirical_growth_rates(count_data = count_data,
                                            time_data = time_data,
                                            num_train = num_train,
                                            num_test = 0,
                                            population = population,
                                            susc_perc = susc_perc,
                                            by_factor = by_factor)

emp_grow_model = Penn_emp_grow_rate$emp_grow_mod

# Get time data corresponding to forecastfuture values
first_pred_date = time_data[length(time_data)] + 1
last_pred_date = time_data[length(time_data)] + num_forecast

pred_time_data = seq.Date(first_pred_date, last_pred_date, by = 'day')

# Get the Day of week for each corresponding day
pred_by_factor = format(pred_time_data, '\%a')

TS_data = Penn_emp_grow_rate$data

attack_rate_bounds = c(.4, .7)

return_plot = TRUE

Penn_forecast = coffee_forecast(TS_data,
                                emp_grow_model,
                                population,
                                total_cases,
                                random_vectors,
                                pred_time_data,
                                pred_by_factor,
                                attack_rate_bounds,
                                return_plot)

}
